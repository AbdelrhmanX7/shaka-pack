// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_info.proto

#include "media_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace shaka {

inline constexpr Range::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        begin_{::uint64_t{0u}},
        end_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR Range::Range(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDefaultTypeInternal _Range_default_instance_;

inline constexpr MediaInfo_VideoInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        decoder_config_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        supplemental_codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0u},
        height_{0u},
        frame_duration_{::uint64_t{0u}},
        time_scale_{0u},
        pixel_width_{0u},
        pixel_height_{0u},
        playback_rate_{0u},
        transfer_characteristics_{0u},
        color_primaries_{0u},
        matrix_coefficients_{0u},
        compatible_brand_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_VideoInfo::MediaInfo_VideoInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_VideoInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_VideoInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_VideoInfoDefaultTypeInternal() {}
  union {
    MediaInfo_VideoInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_VideoInfoDefaultTypeInternal _MediaInfo_VideoInfo_default_instance_;

inline constexpr MediaInfo_TextInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        language_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::shaka::MediaInfo_TextInfo_TextType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_TextInfo::MediaInfo_TextInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_TextInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_TextInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_TextInfoDefaultTypeInternal() {}
  union {
    MediaInfo_TextInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_TextInfoDefaultTypeInternal _MediaInfo_TextInfo_default_instance_;

inline constexpr MediaInfo_ProtectedContent_ContentProtectionEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uuid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pssh_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_ProtectedContent_ContentProtectionEntry::MediaInfo_ProtectedContent_ContentProtectionEntry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_ProtectedContent_ContentProtectionEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_ProtectedContent_ContentProtectionEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_ProtectedContent_ContentProtectionEntryDefaultTypeInternal() {}
  union {
    MediaInfo_ProtectedContent_ContentProtectionEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_ProtectedContent_ContentProtectionEntryDefaultTypeInternal _MediaInfo_ProtectedContent_ContentProtectionEntry_default_instance_;

inline constexpr MediaInfo_ContentProtectionXml_AttributeNameValuePair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXml_AttributeNameValuePair::MediaInfo_ContentProtectionXml_AttributeNameValuePair(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_ContentProtectionXml_AttributeNameValuePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXml_AttributeNameValuePairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_ContentProtectionXml_AttributeNameValuePairDefaultTypeInternal() {}
  union {
    MediaInfo_ContentProtectionXml_AttributeNameValuePair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_ContentProtectionXml_AttributeNameValuePairDefaultTypeInternal _MediaInfo_ContentProtectionXml_AttributeNameValuePair_default_instance_;

inline constexpr MediaInfo_AudioCodecSpecificData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        channel_mask_{0u},
        channel_mpeg_value_{0u},
        ec3_joc_complexity_{0u},
        ac4_ims_flag_{false},
        ac4_cbi_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_AudioCodecSpecificData::MediaInfo_AudioCodecSpecificData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_AudioCodecSpecificDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_AudioCodecSpecificDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_AudioCodecSpecificDataDefaultTypeInternal() {}
  union {
    MediaInfo_AudioCodecSpecificData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_AudioCodecSpecificDataDefaultTypeInternal _MediaInfo_AudioCodecSpecificData_default_instance_;

inline constexpr MediaInfo_ProtectedContent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_protection_entry_{},
        default_key_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protection_scheme_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        include_mspr_pro_{true} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_ProtectedContent::MediaInfo_ProtectedContent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_ProtectedContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_ProtectedContentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_ProtectedContentDefaultTypeInternal() {}
  union {
    MediaInfo_ProtectedContent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_ProtectedContentDefaultTypeInternal _MediaInfo_ProtectedContent_default_instance_;

inline constexpr MediaInfo_ContentProtectionXml_Element::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        subelements_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXml_Element::MediaInfo_ContentProtectionXml_Element(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_ContentProtectionXml_ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXml_ElementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_ContentProtectionXml_ElementDefaultTypeInternal() {}
  union {
    MediaInfo_ContentProtectionXml_Element _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_ContentProtectionXml_ElementDefaultTypeInternal _MediaInfo_ContentProtectionXml_Element_default_instance_;

inline constexpr MediaInfo_AudioInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        language_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        decoder_config_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        codec_specific_data_{nullptr},
        sampling_frequency_{0u},
        time_scale_{0u},
        num_channels_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_AudioInfo::MediaInfo_AudioInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_AudioInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_AudioInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_AudioInfoDefaultTypeInternal() {}
  union {
    MediaInfo_AudioInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_AudioInfoDefaultTypeInternal _MediaInfo_AudioInfo_default_instance_;

inline constexpr MediaInfo_ContentProtectionXml::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        subelements_{},
        scheme_id_uri_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXml::MediaInfo_ContentProtectionXml(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfo_ContentProtectionXmlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfo_ContentProtectionXmlDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfo_ContentProtectionXmlDefaultTypeInternal() {}
  union {
    MediaInfo_ContentProtectionXml _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfo_ContentProtectionXmlDefaultTypeInternal _MediaInfo_ContentProtectionXml_default_instance_;

inline constexpr MediaInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_protections_{},
        hls_characteristics_{},
        dash_accessibilities_{},
        dash_roles_{},
        subsegment_ranges_{},
        media_file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        init_segment_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        segment_template_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        media_file_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        init_segment_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        segment_template_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dash_label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        video_info_{nullptr},
        audio_info_{nullptr},
        text_info_{nullptr},
        init_range_{nullptr},
        index_range_{nullptr},
        protected_content_{nullptr},
        bandwidth_{0u},
        media_duration_seconds_{0},
        segment_duration_seconds_{0},
        reference_time_scale_{0u},
        presentation_time_offset_{::uint64_t{0u}},
        container_type_{static_cast< ::shaka::MediaInfo_ContainerType >(0)},
        forced_subtitle_{false},
        availability_time_offset_{0},
        segment_duration_{::uint64_t{0u}},
        index_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MediaInfo::MediaInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MediaInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfoDefaultTypeInternal() {}
  union {
    MediaInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfoDefaultTypeInternal _MediaInfo_default_instance_;
}  // namespace shaka
static ::_pb::Metadata file_level_metadata_media_5finfo_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_media_5finfo_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_media_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_media_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::shaka::Range, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::Range, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::Range, _impl_.begin_),
    PROTOBUF_FIELD_OFFSET(::shaka::Range, _impl_.end_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.codec_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.time_scale_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.frame_duration_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.decoder_config_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.pixel_width_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.pixel_height_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.playback_rate_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.transfer_characteristics_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.color_primaries_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.matrix_coefficients_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.supplemental_codec_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_VideoInfo, _impl_.compatible_brand_),
    0,
    3,
    4,
    6,
    5,
    1,
    7,
    8,
    9,
    10,
    11,
    12,
    2,
    13,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.codec_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.sampling_frequency_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.time_scale_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.num_channels_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.language_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.decoder_config_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioInfo, _impl_.codec_specific_data_),
    0,
    4,
    5,
    6,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_.channel_mask_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_.channel_mpeg_value_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_.ec3_joc_complexity_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_.ac4_ims_flag_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_AudioCodecSpecificData, _impl_.ac4_cbi_flag_),
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_TextInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_TextInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_TextInfo, _impl_.codec_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_TextInfo, _impl_.language_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_TextInfo, _impl_.type_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.uuid_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.name_version_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.pssh_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _impl_.default_key_id_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _impl_.content_protection_entry_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _impl_.protection_scheme_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ProtectedContent, _impl_.include_mspr_pro_),
    0,
    ~0u,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_Element, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_Element, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_Element, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_Element, _impl_.attributes_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml_Element, _impl_.subelements_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _impl_.scheme_id_uri_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _impl_.attributes_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo_ContentProtectionXml, _impl_.subelements_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.bandwidth_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.video_info_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.audio_info_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.text_info_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.content_protections_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.protected_content_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.reference_time_scale_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.presentation_time_offset_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.container_type_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.init_range_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.index_range_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.media_file_name_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.subsegment_ranges_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.media_duration_seconds_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.init_segment_name_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.segment_template_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.segment_duration_seconds_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.media_file_url_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.init_segment_url_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.segment_template_url_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.hls_characteristics_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.dash_accessibilities_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.dash_roles_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.availability_time_offset_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.segment_duration_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.forced_subtitle_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::shaka::MediaInfo, _impl_.dash_label_),
    13,
    7,
    8,
    9,
    ~0u,
    12,
    16,
    17,
    18,
    10,
    11,
    0,
    ~0u,
    14,
    1,
    2,
    15,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    20,
    21,
    19,
    22,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::shaka::Range)},
        {12, 34, -1, sizeof(::shaka::MediaInfo_VideoInfo)},
        {48, 63, -1, sizeof(::shaka::MediaInfo_AudioInfo)},
        {70, 83, -1, sizeof(::shaka::MediaInfo_AudioCodecSpecificData)},
        {88, 99, -1, sizeof(::shaka::MediaInfo_TextInfo)},
        {102, 113, -1, sizeof(::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry)},
        {116, 128, -1, sizeof(::shaka::MediaInfo_ProtectedContent)},
        {132, 142, -1, sizeof(::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair)},
        {144, 155, -1, sizeof(::shaka::MediaInfo_ContentProtectionXml_Element)},
        {158, 170, -1, sizeof(::shaka::MediaInfo_ContentProtectionXml)},
        {174, 210, -1, sizeof(::shaka::MediaInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::shaka::_Range_default_instance_._instance,
    &::shaka::_MediaInfo_VideoInfo_default_instance_._instance,
    &::shaka::_MediaInfo_AudioInfo_default_instance_._instance,
    &::shaka::_MediaInfo_AudioCodecSpecificData_default_instance_._instance,
    &::shaka::_MediaInfo_TextInfo_default_instance_._instance,
    &::shaka::_MediaInfo_ProtectedContent_ContentProtectionEntry_default_instance_._instance,
    &::shaka::_MediaInfo_ProtectedContent_default_instance_._instance,
    &::shaka::_MediaInfo_ContentProtectionXml_AttributeNameValuePair_default_instance_._instance,
    &::shaka::_MediaInfo_ContentProtectionXml_Element_default_instance_._instance,
    &::shaka::_MediaInfo_ContentProtectionXml_default_instance_._instance,
    &::shaka::_MediaInfo_default_instance_._instance,
};
const char descriptor_table_protodef_media_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020media_info.proto\022\005shaka\"#\n\005Range\022\r\n\005be"
    "gin\030\001 \001(\004\022\013\n\003end\030\002 \001(\004\"\217\025\n\tMediaInfo\022\021\n\t"
    "bandwidth\030\001 \001(\r\022.\n\nvideo_info\030\002 \001(\0132\032.sh"
    "aka.MediaInfo.VideoInfo\022.\n\naudio_info\030\003 "
    "\001(\0132\032.shaka.MediaInfo.AudioInfo\022,\n\ttext_"
    "info\030\004 \001(\0132\031.shaka.MediaInfo.TextInfo\022B\n"
    "\023content_protections\030\005 \003(\0132%.shaka.Media"
    "Info.ContentProtectionXml\022<\n\021protected_c"
    "ontent\030\017 \001(\0132!.shaka.MediaInfo.Protected"
    "Content\022\034\n\024reference_time_scale\030\r \001(\r\022 \n"
    "\030presentation_time_offset\030\020 \001(\004\022I\n\016conta"
    "iner_type\030\016 \001(\0162\036.shaka.MediaInfo.Contai"
    "nerType:\021CONTAINER_UNKNOWN\022 \n\ninit_range"
    "\030\006 \001(\0132\014.shaka.Range\022!\n\013index_range\030\007 \001("
    "\0132\014.shaka.Range\022\027\n\017media_file_name\030\010 \001(\t"
    "\022\'\n\021subsegment_ranges\030\027 \003(\0132\014.shaka.Rang"
    "e\022\036\n\026media_duration_seconds\030\t \001(\002\022\031\n\021ini"
    "t_segment_name\030\n \001(\t\022\030\n\020segment_template"
    "\030\013 \001(\t\022$\n\030segment_duration_seconds\030\014 \001(\002"
    "B\002\030\001\022\026\n\016media_file_url\030\021 \001(\t\022\030\n\020init_seg"
    "ment_url\030\022 \001(\t\022\034\n\024segment_template_url\030\023"
    " \001(\t\022\033\n\023hls_characteristics\030\024 \003(\t\022\034\n\024das"
    "h_accessibilities\030\025 \003(\t\022\022\n\ndash_roles\030\026 "
    "\003(\t\022 \n\030availability_time_offset\030\030 \001(\001\022\030\n"
    "\020segment_duration\030\031 \001(\004\022\036\n\017forced_subtit"
    "le\030\032 \001(\010:\005false\022\r\n\005index\030\034 \001(\r\022\022\n\ndash_l"
    "abel\030\035 \001(\t\032\315\002\n\tVideoInfo\022\r\n\005codec\030\001 \001(\t\022"
    "\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\022\n\ntime_s"
    "cale\030\004 \001(\r\022\026\n\016frame_duration\030\005 \001(\004\022\026\n\016de"
    "coder_config\030\006 \001(\014\022\023\n\013pixel_width\030\007 \001(\r\022"
    "\024\n\014pixel_height\030\010 \001(\r\022\025\n\rplayback_rate\030\t"
    " \001(\r\022 \n\030transfer_characteristics\030\n \001(\r\022\027"
    "\n\017color_primaries\030\013 \001(\r\022\033\n\023matrix_coeffi"
    "cients\030\014 \001(\r\022\032\n\022supplemental_codec\030\r \001(\t"
    "\022\030\n\020compatible_brand\030\016 \001(\r\032\320\001\n\tAudioInfo"
    "\022\r\n\005codec\030\001 \001(\t\022\032\n\022sampling_frequency\030\002 "
    "\001(\r\022\022\n\ntime_scale\030\003 \001(\r\022\024\n\014num_channels\030"
    "\004 \001(\r\022\020\n\010language\030\005 \001(\t\022\026\n\016decoder_confi"
    "g\030\006 \001(\014\022D\n\023codec_specific_data\030\007 \001(\0132\'.s"
    "haka.MediaInfo.AudioCodecSpecificData\032\222\001"
    "\n\026AudioCodecSpecificData\022\024\n\014channel_mask"
    "\030\001 \001(\r\022\032\n\022channel_mpeg_value\030\002 \001(\r\022\032\n\022ec"
    "3_joc_complexity\030\003 \001(\r\022\024\n\014ac4_ims_flag\030\004"
    " \001(\010\022\024\n\014ac4_cbi_flag\030\005 \001(\010\032\221\001\n\010TextInfo\022"
    "\r\n\005codec\030\001 \001(\t\022\020\n\010language\030\002 \001(\t\0220\n\004type"
    "\030\003 \001(\0162\".shaka.MediaInfo.TextInfo.TextTy"
    "pe\"2\n\010TextType\022\013\n\007UNKNOWN\020\000\022\013\n\007CAPTION\020\001"
    "\022\014\n\010SUBTITLE\020\002\032\223\002\n\020ProtectedContent\022\026\n\016d"
    "efault_key_id\030\001 \001(\014\022Z\n\030content_protectio"
    "n_entry\030\002 \003(\01328.shaka.MediaInfo.Protecte"
    "dContent.ContentProtectionEntry\022\037\n\021prote"
    "ction_scheme\030\003 \001(\t:\004cenc\022\036\n\020include_mspr"
    "_pro\030\004 \001(\010:\004true\032J\n\026ContentProtectionEnt"
    "ry\022\014\n\004uuid\030\001 \001(\t\022\024\n\014name_version\030\002 \001(\t\022\014"
    "\n\004pssh\030\003 \001(\014\032\271\003\n\024ContentProtectionXml\022\025\n"
    "\rscheme_id_uri\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022P\n\na"
    "ttributes\030\003 \003(\0132<.shaka.MediaInfo.Conten"
    "tProtectionXml.AttributeNameValuePair\022B\n"
    "\013subelements\030\004 \003(\0132-.shaka.MediaInfo.Con"
    "tentProtectionXml.Element\0325\n\026AttributeNa"
    "meValuePair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
    "\032\255\001\n\007Element\022\014\n\004name\030\001 \001(\t\022P\n\nattributes"
    "\030\002 \003(\0132<.shaka.MediaInfo.ContentProtecti"
    "onXml.AttributeNameValuePair\022B\n\013subeleme"
    "nts\030\003 \003(\0132-.shaka.MediaInfo.ContentProte"
    "ctionXml.Element\"\225\001\n\rContainerType\022\025\n\021CO"
    "NTAINER_UNKNOWN\020\000\022\021\n\rCONTAINER_MP4\020\001\022\026\n\022"
    "CONTAINER_MPEG2_TS\020\002\022\022\n\016CONTAINER_WEBM\020\003"
    "\022\022\n\016CONTAINER_TEXT\020\004\022\032\n\026CONTAINER_PACKED"
    "_AUDIO\020\005"
};
static ::absl::once_flag descriptor_table_media_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_media_5finfo_2eproto = {
    false,
    false,
    2768,
    descriptor_table_protodef_media_5finfo_2eproto,
    "media_info.proto",
    &descriptor_table_media_5finfo_2eproto_once,
    nullptr,
    0,
    11,
    schemas,
    file_default_instances,
    TableStruct_media_5finfo_2eproto::offsets,
    file_level_metadata_media_5finfo_2eproto,
    file_level_enum_descriptors_media_5finfo_2eproto,
    file_level_service_descriptors_media_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_media_5finfo_2eproto_getter() {
  return &descriptor_table_media_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_media_5finfo_2eproto(&descriptor_table_media_5finfo_2eproto);
namespace shaka {
const ::google::protobuf::EnumDescriptor* MediaInfo_TextInfo_TextType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_media_5finfo_2eproto);
  return file_level_enum_descriptors_media_5finfo_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MediaInfo_TextInfo_TextType_internal_data_[] = {
    196608u, 0u, };
bool MediaInfo_TextInfo_TextType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MediaInfo_TextInfo_TextType MediaInfo_TextInfo::UNKNOWN;
constexpr MediaInfo_TextInfo_TextType MediaInfo_TextInfo::CAPTION;
constexpr MediaInfo_TextInfo_TextType MediaInfo_TextInfo::SUBTITLE;
constexpr MediaInfo_TextInfo_TextType MediaInfo_TextInfo::TextType_MIN;
constexpr MediaInfo_TextInfo_TextType MediaInfo_TextInfo::TextType_MAX;
constexpr int MediaInfo_TextInfo::TextType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MediaInfo_ContainerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_media_5finfo_2eproto);
  return file_level_enum_descriptors_media_5finfo_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MediaInfo_ContainerType_internal_data_[] = {
    393216u, 0u, };
bool MediaInfo_ContainerType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_UNKNOWN;
constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_MP4;
constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_MPEG2_TS;
constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_WEBM;
constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_TEXT;
constexpr MediaInfo_ContainerType MediaInfo::CONTAINER_PACKED_AUDIO;
constexpr MediaInfo_ContainerType MediaInfo::ContainerType_MIN;
constexpr MediaInfo_ContainerType MediaInfo::ContainerType_MAX;
constexpr int MediaInfo::ContainerType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Range::_Internal {
 public:
  using HasBits = decltype(std::declval<Range>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Range, _impl_._has_bits_);
  static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Range::Range(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.Range)
}
Range::Range(
    ::google::protobuf::Arena* arena, const Range& from)
    : Range(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Range::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Range::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, begin_),
           0,
           offsetof(Impl_, end_) -
               offsetof(Impl_, begin_) +
               sizeof(Impl_::end_));
}
Range::~Range() {
  // @@protoc_insertion_point(destructor:shaka.Range)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Range::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.Range)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.begin_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.end_) -
        reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Range::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Range::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Range, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Range_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional uint64 end = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Range, _impl_.end_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.end_)}},
    // optional uint64 begin = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Range, _impl_.begin_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Range, _impl_.begin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 begin = 1;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.begin_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 end = 2;
    {PROTOBUF_FIELD_OFFSET(Range, _impl_.end_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Range::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.Range)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_begin(), target);
  }

  // optional uint64 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.Range)
  return target;
}

::size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.Range)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 begin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_begin());
    }

    // optional uint64 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Range::_class_data_ = {
    Range::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Range::GetClassData() const {
  return &_class_data_;
}

void Range::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Range*>(&to_msg);
  auto& from = static_cast<const Range&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.Range)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_ = from._impl_.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Range::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Range::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Range::InternalSwap(Range* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Range, _impl_.end_)
      + sizeof(Range::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(Range, _impl_.begin_)>(
          reinterpret_cast<char*>(&_impl_.begin_),
          reinterpret_cast<char*>(&other->_impl_.begin_));
}

::google::protobuf::Metadata Range::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[0]);
}
// ===================================================================

class MediaInfo_VideoInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_VideoInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frame_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pixel_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pixel_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transfer_characteristics(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_color_primaries(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_matrix_coefficients(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_supplemental_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compatible_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

MediaInfo_VideoInfo::MediaInfo_VideoInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.VideoInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_VideoInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        codec_(arena, from.codec_),
        decoder_config_(arena, from.decoder_config_),
        supplemental_codec_(arena, from.supplemental_codec_) {}

MediaInfo_VideoInfo::MediaInfo_VideoInfo(
    ::google::protobuf::Arena* arena,
    const MediaInfo_VideoInfo& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_VideoInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, compatible_brand_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::compatible_brand_));

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.VideoInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_VideoInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        codec_(arena),
        decoder_config_(arena),
        supplemental_codec_(arena) {}

inline void MediaInfo_VideoInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, compatible_brand_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::compatible_brand_));
}
MediaInfo_VideoInfo::~MediaInfo_VideoInfo() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.VideoInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_VideoInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.codec_.Destroy();
  _impl_.decoder_config_.Destroy();
  _impl_.supplemental_codec_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.VideoInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.codec_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.decoder_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.supplemental_codec_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pixel_width_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.pixel_width_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.pixel_height_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.compatible_brand_) -
        reinterpret_cast<char*>(&_impl_.pixel_height_)) + sizeof(_impl_.compatible_brand_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_VideoInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 65, 2> MediaInfo_VideoInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MediaInfo_VideoInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string codec = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.codec_)}},
    // optional uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.width_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.width_)}},
    // optional uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.height_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.height_)}},
    // optional uint32 time_scale = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.time_scale_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.time_scale_)}},
    // optional uint64 frame_duration = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MediaInfo_VideoInfo, _impl_.frame_duration_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.frame_duration_)}},
    // optional bytes decoder_config = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.decoder_config_)}},
    // optional uint32 pixel_width = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.pixel_width_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.pixel_width_)}},
    // optional uint32 pixel_height = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.pixel_height_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.pixel_height_)}},
    // optional uint32 playback_rate = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.playback_rate_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.playback_rate_)}},
    // optional uint32 transfer_characteristics = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.transfer_characteristics_), 10>(),
     {80, 10, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.transfer_characteristics_)}},
    // optional uint32 color_primaries = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.color_primaries_), 11>(),
     {88, 11, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.color_primaries_)}},
    // optional uint32 matrix_coefficients = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.matrix_coefficients_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.matrix_coefficients_)}},
    // optional string supplemental_codec = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.supplemental_codec_)}},
    // optional uint32 compatible_brand = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_VideoInfo, _impl_.compatible_brand_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.compatible_brand_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string codec = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.width_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.height_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 time_scale = 4;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.time_scale_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 frame_duration = 5;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.frame_duration_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional bytes decoder_config = 6;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.decoder_config_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 pixel_width = 7;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.pixel_width_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pixel_height = 8;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.pixel_height_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 playback_rate = 9;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.playback_rate_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 transfer_characteristics = 10;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.transfer_characteristics_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 color_primaries = 11;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.color_primaries_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 matrix_coefficients = 12;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.matrix_coefficients_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string supplemental_codec = 13;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.supplemental_codec_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 compatible_brand = 14;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.compatible_brand_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\31\5\0\0\0\0\0\0\0\0\0\0\0\22\0\0"
    "shaka.MediaInfo.VideoInfo"
    "codec"
    "supplemental_codec"
  }},
};

::uint8_t* MediaInfo_VideoInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.VideoInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string codec = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_codec();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.VideoInfo.codec");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // optional uint32 time_scale = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_time_scale(), target);
  }

  // optional uint64 frame_duration = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_frame_duration(), target);
  }

  // optional bytes decoder_config = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_decoder_config();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional uint32 pixel_width = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_pixel_width(), target);
  }

  // optional uint32 pixel_height = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_pixel_height(), target);
  }

  // optional uint32 playback_rate = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_playback_rate(), target);
  }

  // optional uint32 transfer_characteristics = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_transfer_characteristics(), target);
  }

  // optional uint32 color_primaries = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_color_primaries(), target);
  }

  // optional uint32 matrix_coefficients = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_matrix_coefficients(), target);
  }

  // optional string supplemental_codec = 13;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_supplemental_codec();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.VideoInfo.supplemental_codec");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional uint32 compatible_brand = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_compatible_brand(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.VideoInfo)
  return target;
}

::size_t MediaInfo_VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.VideoInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string codec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_codec());
    }

    // optional bytes decoder_config = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_decoder_config());
    }

    // optional string supplemental_codec = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_supplemental_codec());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_height());
    }

    // optional uint64 frame_duration = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_frame_duration());
    }

    // optional uint32 time_scale = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time_scale());
    }

    // optional uint32 pixel_width = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pixel_width());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 pixel_height = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_pixel_height());
    }

    // optional uint32 playback_rate = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_playback_rate());
    }

    // optional uint32 transfer_characteristics = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_transfer_characteristics());
    }

    // optional uint32 color_primaries = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_color_primaries());
    }

    // optional uint32 matrix_coefficients = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_matrix_coefficients());
    }

    // optional uint32 compatible_brand = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_compatible_brand());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_VideoInfo::_class_data_ = {
    MediaInfo_VideoInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_VideoInfo::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_VideoInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_VideoInfo*>(&to_msg);
  auto& from = static_cast<const MediaInfo_VideoInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.VideoInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_decoder_config(from._internal_decoder_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_supplemental_codec(from._internal_supplemental_codec());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.frame_duration_ = from._impl_.frame_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_scale_ = from._impl_.time_scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.pixel_width_ = from._impl_.pixel_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pixel_height_ = from._impl_.pixel_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.playback_rate_ = from._impl_.playback_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.transfer_characteristics_ = from._impl_.transfer_characteristics_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.color_primaries_ = from._impl_.color_primaries_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.matrix_coefficients_ = from._impl_.matrix_coefficients_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.compatible_brand_ = from._impl_.compatible_brand_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_VideoInfo::CopyFrom(const MediaInfo_VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_VideoInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_VideoInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_VideoInfo::InternalSwap(MediaInfo_VideoInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_, &other->_impl_.codec_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.decoder_config_, &other->_impl_.decoder_config_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.supplemental_codec_, &other->_impl_.supplemental_codec_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.compatible_brand_)
      + sizeof(MediaInfo_VideoInfo::_impl_.compatible_brand_)
      - PROTOBUF_FIELD_OFFSET(MediaInfo_VideoInfo, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata MediaInfo_VideoInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[1]);
}
// ===================================================================

class MediaInfo_AudioInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_AudioInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::shaka::MediaInfo_AudioCodecSpecificData& codec_specific_data(const MediaInfo_AudioInfo* msg);
  static void set_has_codec_specific_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::shaka::MediaInfo_AudioCodecSpecificData& MediaInfo_AudioInfo::_Internal::codec_specific_data(const MediaInfo_AudioInfo* msg) {
  return *msg->_impl_.codec_specific_data_;
}
MediaInfo_AudioInfo::MediaInfo_AudioInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.AudioInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_AudioInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        codec_(arena, from.codec_),
        language_(arena, from.language_),
        decoder_config_(arena, from.decoder_config_) {}

MediaInfo_AudioInfo::MediaInfo_AudioInfo(
    ::google::protobuf::Arena* arena,
    const MediaInfo_AudioInfo& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_AudioInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.codec_specific_data_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::shaka::MediaInfo_AudioCodecSpecificData>(arena, *from._impl_.codec_specific_data_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sampling_frequency_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sampling_frequency_),
           offsetof(Impl_, num_channels_) -
               offsetof(Impl_, sampling_frequency_) +
               sizeof(Impl_::num_channels_));

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.AudioInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_AudioInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        codec_(arena),
        language_(arena),
        decoder_config_(arena) {}

inline void MediaInfo_AudioInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, codec_specific_data_),
           0,
           offsetof(Impl_, num_channels_) -
               offsetof(Impl_, codec_specific_data_) +
               sizeof(Impl_::num_channels_));
}
MediaInfo_AudioInfo::~MediaInfo_AudioInfo() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.AudioInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_AudioInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.codec_.Destroy();
  _impl_.language_.Destroy();
  _impl_.decoder_config_.Destroy();
  delete _impl_.codec_specific_data_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_AudioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.AudioInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.codec_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.decoder_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.codec_specific_data_ != nullptr);
      _impl_.codec_specific_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.sampling_frequency_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_channels_) -
        reinterpret_cast<char*>(&_impl_.sampling_frequency_)) + sizeof(_impl_.num_channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_AudioInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 47, 2> MediaInfo_AudioInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_AudioInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string codec = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.codec_)}},
    // optional uint32 sampling_frequency = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioInfo, _impl_.sampling_frequency_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.sampling_frequency_)}},
    // optional uint32 time_scale = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioInfo, _impl_.time_scale_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.time_scale_)}},
    // optional uint32 num_channels = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioInfo, _impl_.num_channels_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.num_channels_)}},
    // optional string language = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.language_)}},
    // optional bytes decoder_config = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.decoder_config_)}},
    // optional .shaka.MediaInfo.AudioCodecSpecificData codec_specific_data = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.codec_specific_data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string codec = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 sampling_frequency = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.sampling_frequency_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 time_scale = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.time_scale_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 num_channels = 4;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.num_channels_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string language = 5;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.language_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes decoder_config = 6;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.decoder_config_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .shaka.MediaInfo.AudioCodecSpecificData codec_specific_data = 7;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.codec_specific_data_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_AudioCodecSpecificData>()},
  }}, {{
    "\31\5\0\0\0\10\0\0"
    "shaka.MediaInfo.AudioInfo"
    "codec"
    "language"
  }},
};

::uint8_t* MediaInfo_AudioInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.AudioInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string codec = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_codec();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.AudioInfo.codec");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 sampling_frequency = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_sampling_frequency(), target);
  }

  // optional uint32 time_scale = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_time_scale(), target);
  }

  // optional uint32 num_channels = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_num_channels(), target);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_language();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.AudioInfo.language");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional bytes decoder_config = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_decoder_config();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional .shaka.MediaInfo.AudioCodecSpecificData codec_specific_data = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::codec_specific_data(this),
        _Internal::codec_specific_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.AudioInfo)
  return target;
}

::size_t MediaInfo_AudioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.AudioInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string codec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_codec());
    }

    // optional string language = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_language());
    }

    // optional bytes decoder_config = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_decoder_config());
    }

    // optional .shaka.MediaInfo.AudioCodecSpecificData codec_specific_data = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.codec_specific_data_);
    }

    // optional uint32 sampling_frequency = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sampling_frequency());
    }

    // optional uint32 time_scale = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time_scale());
    }

    // optional uint32 num_channels = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_num_channels());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_AudioInfo::_class_data_ = {
    MediaInfo_AudioInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_AudioInfo::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_AudioInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_AudioInfo*>(&to_msg);
  auto& from = static_cast<const MediaInfo_AudioInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.AudioInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_decoder_config(from._internal_decoder_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_codec_specific_data()->::shaka::MediaInfo_AudioCodecSpecificData::MergeFrom(
          from._internal_codec_specific_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sampling_frequency_ = from._impl_.sampling_frequency_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_scale_ = from._impl_.time_scale_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_channels_ = from._impl_.num_channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_AudioInfo::CopyFrom(const MediaInfo_AudioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.AudioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_AudioInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_AudioInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_AudioInfo::InternalSwap(MediaInfo_AudioInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_, &other->_impl_.codec_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_, &other->_impl_.language_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.decoder_config_, &other->_impl_.decoder_config_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.num_channels_)
      + sizeof(MediaInfo_AudioInfo::_impl_.num_channels_)
      - PROTOBUF_FIELD_OFFSET(MediaInfo_AudioInfo, _impl_.codec_specific_data_)>(
          reinterpret_cast<char*>(&_impl_.codec_specific_data_),
          reinterpret_cast<char*>(&other->_impl_.codec_specific_data_));
}

::google::protobuf::Metadata MediaInfo_AudioInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[2]);
}
// ===================================================================

class MediaInfo_AudioCodecSpecificData::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_AudioCodecSpecificData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_._has_bits_);
  static void set_has_channel_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_mpeg_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ec3_joc_complexity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ac4_ims_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ac4_cbi_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MediaInfo_AudioCodecSpecificData::MediaInfo_AudioCodecSpecificData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.AudioCodecSpecificData)
}
MediaInfo_AudioCodecSpecificData::MediaInfo_AudioCodecSpecificData(
    ::google::protobuf::Arena* arena, const MediaInfo_AudioCodecSpecificData& from)
    : MediaInfo_AudioCodecSpecificData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_AudioCodecSpecificData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MediaInfo_AudioCodecSpecificData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_mask_),
           0,
           offsetof(Impl_, ac4_cbi_flag_) -
               offsetof(Impl_, channel_mask_) +
               sizeof(Impl_::ac4_cbi_flag_));
}
MediaInfo_AudioCodecSpecificData::~MediaInfo_AudioCodecSpecificData() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.AudioCodecSpecificData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_AudioCodecSpecificData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_AudioCodecSpecificData::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.AudioCodecSpecificData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.channel_mask_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ac4_cbi_flag_) -
        reinterpret_cast<char*>(&_impl_.channel_mask_)) + sizeof(_impl_.ac4_cbi_flag_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_AudioCodecSpecificData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> MediaInfo_AudioCodecSpecificData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MediaInfo_AudioCodecSpecificData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 channel_mask = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioCodecSpecificData, _impl_.channel_mask_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.channel_mask_)}},
    // optional uint32 channel_mpeg_value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioCodecSpecificData, _impl_.channel_mpeg_value_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.channel_mpeg_value_)}},
    // optional uint32 ec3_joc_complexity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo_AudioCodecSpecificData, _impl_.ec3_joc_complexity_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ec3_joc_complexity_)}},
    // optional bool ac4_ims_flag = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MediaInfo_AudioCodecSpecificData, _impl_.ac4_ims_flag_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ac4_ims_flag_)}},
    // optional bool ac4_cbi_flag = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MediaInfo_AudioCodecSpecificData, _impl_.ac4_cbi_flag_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ac4_cbi_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 channel_mask = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.channel_mask_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 channel_mpeg_value = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.channel_mpeg_value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ec3_joc_complexity = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ec3_joc_complexity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool ac4_ims_flag = 4;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ac4_ims_flag_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ac4_cbi_flag = 5;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ac4_cbi_flag_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* MediaInfo_AudioCodecSpecificData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.AudioCodecSpecificData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 channel_mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_channel_mask(), target);
  }

  // optional uint32 channel_mpeg_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_channel_mpeg_value(), target);
  }

  // optional uint32 ec3_joc_complexity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_ec3_joc_complexity(), target);
  }

  // optional bool ac4_ims_flag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_ac4_ims_flag(), target);
  }

  // optional bool ac4_cbi_flag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_ac4_cbi_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.AudioCodecSpecificData)
  return target;
}

::size_t MediaInfo_AudioCodecSpecificData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.AudioCodecSpecificData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 channel_mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_channel_mask());
    }

    // optional uint32 channel_mpeg_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_channel_mpeg_value());
    }

    // optional uint32 ec3_joc_complexity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ec3_joc_complexity());
    }

    // optional bool ac4_ims_flag = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool ac4_cbi_flag = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_AudioCodecSpecificData::_class_data_ = {
    MediaInfo_AudioCodecSpecificData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_AudioCodecSpecificData::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_AudioCodecSpecificData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_AudioCodecSpecificData*>(&to_msg);
  auto& from = static_cast<const MediaInfo_AudioCodecSpecificData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.AudioCodecSpecificData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.channel_mask_ = from._impl_.channel_mask_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.channel_mpeg_value_ = from._impl_.channel_mpeg_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ec3_joc_complexity_ = from._impl_.ec3_joc_complexity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ac4_ims_flag_ = from._impl_.ac4_ims_flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ac4_cbi_flag_ = from._impl_.ac4_cbi_flag_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_AudioCodecSpecificData::CopyFrom(const MediaInfo_AudioCodecSpecificData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.AudioCodecSpecificData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_AudioCodecSpecificData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_AudioCodecSpecificData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_AudioCodecSpecificData::InternalSwap(MediaInfo_AudioCodecSpecificData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.ac4_cbi_flag_)
      + sizeof(MediaInfo_AudioCodecSpecificData::_impl_.ac4_cbi_flag_)
      - PROTOBUF_FIELD_OFFSET(MediaInfo_AudioCodecSpecificData, _impl_.channel_mask_)>(
          reinterpret_cast<char*>(&_impl_.channel_mask_),
          reinterpret_cast<char*>(&other->_impl_.channel_mask_));
}

::google::protobuf::Metadata MediaInfo_AudioCodecSpecificData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[3]);
}
// ===================================================================

class MediaInfo_TextInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_TextInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MediaInfo_TextInfo::MediaInfo_TextInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.TextInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_TextInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        codec_(arena, from.codec_),
        language_(arena, from.language_) {}

MediaInfo_TextInfo::MediaInfo_TextInfo(
    ::google::protobuf::Arena* arena,
    const MediaInfo_TextInfo& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_TextInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.TextInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_TextInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        codec_(arena),
        language_(arena) {}

inline void MediaInfo_TextInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
MediaInfo_TextInfo::~MediaInfo_TextInfo() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.TextInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_TextInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.codec_.Destroy();
  _impl_.language_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_TextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.TextInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.codec_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_TextInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 46, 2> MediaInfo_TextInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_TextInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string codec = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.codec_)}},
    // optional string language = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.language_)}},
    // optional .shaka.MediaInfo.TextInfo.TextType type = 3;
    {::_pbi::TcParser::FastEr0S1,
     {24, 2, 2, PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string codec = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string language = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.language_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .shaka.MediaInfo.TextInfo.TextType type = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_TextInfo, _impl_.type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
    "\30\5\10\0\0\0\0\0"
    "shaka.MediaInfo.TextInfo"
    "codec"
    "language"
  }},
};

::uint8_t* MediaInfo_TextInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.TextInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string codec = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_codec();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.TextInfo.codec");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string language = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_language();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.TextInfo.language");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .shaka.MediaInfo.TextInfo.TextType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.TextInfo)
  return target;
}

::size_t MediaInfo_TextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.TextInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string codec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_codec());
    }

    // optional string language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_language());
    }

    // optional .shaka.MediaInfo.TextInfo.TextType type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_TextInfo::_class_data_ = {
    MediaInfo_TextInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_TextInfo::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_TextInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_TextInfo*>(&to_msg);
  auto& from = static_cast<const MediaInfo_TextInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.TextInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_codec(from._internal_codec());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_TextInfo::CopyFrom(const MediaInfo_TextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.TextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_TextInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_TextInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_TextInfo::InternalSwap(MediaInfo_TextInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_, &other->_impl_.codec_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_, &other->_impl_.language_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata MediaInfo_TextInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[4]);
}
// ===================================================================

class MediaInfo_ProtectedContent_ContentProtectionEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_ProtectedContent_ContentProtectionEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pssh(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MediaInfo_ProtectedContent_ContentProtectionEntry::MediaInfo_ProtectedContent_ContentProtectionEntry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ProtectedContent_ContentProtectionEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uuid_(arena, from.uuid_),
        name_version_(arena, from.name_version_),
        pssh_(arena, from.pssh_) {}

MediaInfo_ProtectedContent_ContentProtectionEntry::MediaInfo_ProtectedContent_ContentProtectionEntry(
    ::google::protobuf::Arena* arena,
    const MediaInfo_ProtectedContent_ContentProtectionEntry& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_ProtectedContent_ContentProtectionEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ProtectedContent_ContentProtectionEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uuid_(arena),
        name_version_(arena),
        pssh_(arena) {}

inline void MediaInfo_ProtectedContent_ContentProtectionEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MediaInfo_ProtectedContent_ContentProtectionEntry::~MediaInfo_ProtectedContent_ContentProtectionEntry() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_ProtectedContent_ContentProtectionEntry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.name_version_.Destroy();
  _impl_.pssh_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_ProtectedContent_ContentProtectionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.name_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.pssh_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_ProtectedContent_ContentProtectionEntry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 80, 2> MediaInfo_ProtectedContent_ContentProtectionEntry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MediaInfo_ProtectedContent_ContentProtectionEntry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string uuid = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.uuid_)}},
    // optional string name_version = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.name_version_)}},
    // optional bytes pssh = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.pssh_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string uuid = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.uuid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string name_version = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.name_version_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes pssh = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent_ContentProtectionEntry, _impl_.pssh_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\67\4\14\0\0\0\0\0"
    "shaka.MediaInfo.ProtectedContent.ContentProtectionEntry"
    "uuid"
    "name_version"
  }},
};

::uint8_t* MediaInfo_ProtectedContent_ContentProtectionEntry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_uuid();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ProtectedContent.ContentProtectionEntry.uuid");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string name_version = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_name_version();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ProtectedContent.ContentProtectionEntry.name_version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bytes pssh = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_pssh();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  return target;
}

::size_t MediaInfo_ProtectedContent_ContentProtectionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_uuid());
    }

    // optional string name_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name_version());
    }

    // optional bytes pssh = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_pssh());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_ProtectedContent_ContentProtectionEntry::_class_data_ = {
    MediaInfo_ProtectedContent_ContentProtectionEntry::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_ProtectedContent_ContentProtectionEntry::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_ProtectedContent_ContentProtectionEntry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_ProtectedContent_ContentProtectionEntry*>(&to_msg);
  auto& from = static_cast<const MediaInfo_ProtectedContent_ContentProtectionEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_name_version(from._internal_name_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_pssh(from._internal_pssh());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_ProtectedContent_ContentProtectionEntry::CopyFrom(const MediaInfo_ProtectedContent_ContentProtectionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.ProtectedContent.ContentProtectionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_ProtectedContent_ContentProtectionEntry::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_ProtectedContent_ContentProtectionEntry::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_ProtectedContent_ContentProtectionEntry::InternalSwap(MediaInfo_ProtectedContent_ContentProtectionEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uuid_, &other->_impl_.uuid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_version_, &other->_impl_.name_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pssh_, &other->_impl_.pssh_, arena);
}

::google::protobuf::Metadata MediaInfo_ProtectedContent_ContentProtectionEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[5]);
}
// ===================================================================

class MediaInfo_ProtectedContent::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_ProtectedContent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_._has_bits_);
  static void set_has_default_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protection_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_mspr_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

/*static*/ const ::_pbi::LazyString MediaInfo_ProtectedContent::Impl_::_i_give_permission_to_break_this_code_default_protection_scheme_{
    {{"cenc", 4}},
    {nullptr},
};
MediaInfo_ProtectedContent::MediaInfo_ProtectedContent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.ProtectedContent)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ProtectedContent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_protection_entry_{visibility, arena, from.content_protection_entry_},
        default_key_id_(arena, from.default_key_id_),
        protection_scheme_(arena, from.protection_scheme_, _i_give_permission_to_break_this_code_default_protection_scheme_) {}

MediaInfo_ProtectedContent::MediaInfo_ProtectedContent(
    ::google::protobuf::Arena* arena,
    const MediaInfo_ProtectedContent& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_ProtectedContent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.include_mspr_pro_ = from._impl_.include_mspr_pro_;

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.ProtectedContent)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ProtectedContent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        content_protection_entry_{visibility, arena},
        default_key_id_(arena),
        protection_scheme_(arena, Impl_::_i_give_permission_to_break_this_code_default_protection_scheme_),
        include_mspr_pro_{true} {}

inline void MediaInfo_ProtectedContent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MediaInfo_ProtectedContent::~MediaInfo_ProtectedContent() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.ProtectedContent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_ProtectedContent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.default_key_id_.Destroy();
  _impl_.protection_scheme_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_ProtectedContent::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.ProtectedContent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_protection_entry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.default_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.protection_scheme_.ClearToDefault(::shaka::MediaInfo_ProtectedContent::Impl_::_i_give_permission_to_break_this_code_default_protection_scheme_, GetArena());
    }
    _impl_.include_mspr_pro_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_ProtectedContent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 58, 2> MediaInfo_ProtectedContent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_ProtectedContent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bool include_mspr_pro = 4 [default = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MediaInfo_ProtectedContent, _impl_.include_mspr_pro_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.include_mspr_pro_)}},
    // optional bytes default_key_id = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.default_key_id_)}},
    // repeated .shaka.MediaInfo.ProtectedContent.ContentProtectionEntry content_protection_entry = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.content_protection_entry_)}},
    // optional string protection_scheme = 3 [default = "cenc"];
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.protection_scheme_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes default_key_id = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.default_key_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .shaka.MediaInfo.ProtectedContent.ContentProtectionEntry content_protection_entry = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.content_protection_entry_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string protection_scheme = 3 [default = "cenc"];
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.protection_scheme_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool include_mspr_pro = 4 [default = true];
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ProtectedContent, _impl_.include_mspr_pro_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ProtectedContent_ContentProtectionEntry>()},
  }}, {{
    "\40\0\0\21\0\0\0\0"
    "shaka.MediaInfo.ProtectedContent"
    "protection_scheme"
  }},
};

::uint8_t* MediaInfo_ProtectedContent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.ProtectedContent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes default_key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_default_key_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // repeated .shaka.MediaInfo.ProtectedContent.ContentProtectionEntry content_protection_entry = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_protection_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_protection_entry().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string protection_scheme = 3 [default = "cenc"];
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_protection_scheme();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ProtectedContent.protection_scheme");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool include_mspr_pro = 4 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_include_mspr_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.ProtectedContent)
  return target;
}

::size_t MediaInfo_ProtectedContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.ProtectedContent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shaka.MediaInfo.ProtectedContent.ContentProtectionEntry content_protection_entry = 2;
  total_size += 1UL * this->_internal_content_protection_entry_size();
  for (const auto& msg : this->_internal_content_protection_entry()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes default_key_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_default_key_id());
    }

    // optional string protection_scheme = 3 [default = "cenc"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_protection_scheme());
    }

    // optional bool include_mspr_pro = 4 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_ProtectedContent::_class_data_ = {
    MediaInfo_ProtectedContent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_ProtectedContent::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_ProtectedContent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_ProtectedContent*>(&to_msg);
  auto& from = static_cast<const MediaInfo_ProtectedContent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.ProtectedContent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content_protection_entry()->MergeFrom(
      from._internal_content_protection_entry());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_default_key_id(from._internal_default_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_protection_scheme(from._internal_protection_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.include_mspr_pro_ = from._impl_.include_mspr_pro_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_ProtectedContent::CopyFrom(const MediaInfo_ProtectedContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.ProtectedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_ProtectedContent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_ProtectedContent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_ProtectedContent::InternalSwap(MediaInfo_ProtectedContent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_protection_entry_.InternalSwap(&other->_impl_.content_protection_entry_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_key_id_, &other->_impl_.default_key_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protection_scheme_, &other->_impl_.protection_scheme_, arena);
        swap(_impl_.include_mspr_pro_, other->_impl_.include_mspr_pro_);
}

::google::protobuf::Metadata MediaInfo_ProtectedContent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[6]);
}
// ===================================================================

class MediaInfo_ContentProtectionXml_AttributeNameValuePair::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_ContentProtectionXml_AttributeNameValuePair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MediaInfo_ContentProtectionXml_AttributeNameValuePair::MediaInfo_ContentProtectionXml_AttributeNameValuePair(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml_AttributeNameValuePair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        value_(arena, from.value_) {}

MediaInfo_ContentProtectionXml_AttributeNameValuePair::MediaInfo_ContentProtectionXml_AttributeNameValuePair(
    ::google::protobuf::Arena* arena,
    const MediaInfo_ContentProtectionXml_AttributeNameValuePair& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_ContentProtectionXml_AttributeNameValuePair* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml_AttributeNameValuePair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        value_(arena) {}

inline void MediaInfo_ContentProtectionXml_AttributeNameValuePair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MediaInfo_ContentProtectionXml_AttributeNameValuePair::~MediaInfo_ContentProtectionXml_AttributeNameValuePair() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_ContentProtectionXml_AttributeNameValuePair::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_ContentProtectionXml_AttributeNameValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_ContentProtectionXml_AttributeNameValuePair::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 77, 2> MediaInfo_ContentProtectionXml_AttributeNameValuePair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MediaInfo_ContentProtectionXml_AttributeNameValuePair_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string value = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.value_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string value = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_AttributeNameValuePair, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\73\4\5\0\0\0\0\0"
    "shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair"
    "name"
    "value"
  }},
};

::uint8_t* MediaInfo_ContentProtectionXml_AttributeNameValuePair::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  return target;
}

::size_t MediaInfo_ContentProtectionXml_AttributeNameValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_ContentProtectionXml_AttributeNameValuePair::_class_data_ = {
    MediaInfo_ContentProtectionXml_AttributeNameValuePair::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_ContentProtectionXml_AttributeNameValuePair::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_ContentProtectionXml_AttributeNameValuePair::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_ContentProtectionXml_AttributeNameValuePair*>(&to_msg);
  auto& from = static_cast<const MediaInfo_ContentProtectionXml_AttributeNameValuePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_ContentProtectionXml_AttributeNameValuePair::CopyFrom(const MediaInfo_ContentProtectionXml_AttributeNameValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_ContentProtectionXml_AttributeNameValuePair::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_ContentProtectionXml_AttributeNameValuePair::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_ContentProtectionXml_AttributeNameValuePair::InternalSwap(MediaInfo_ContentProtectionXml_AttributeNameValuePair* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata MediaInfo_ContentProtectionXml_AttributeNameValuePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[7]);
}
// ===================================================================

class MediaInfo_ContentProtectionXml_Element::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_ContentProtectionXml_Element>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MediaInfo_ContentProtectionXml_Element::MediaInfo_ContentProtectionXml_Element(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.ContentProtectionXml.Element)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml_Element::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        subelements_{visibility, arena, from.subelements_},
        name_(arena, from.name_) {}

MediaInfo_ContentProtectionXml_Element::MediaInfo_ContentProtectionXml_Element(
    ::google::protobuf::Arena* arena,
    const MediaInfo_ContentProtectionXml_Element& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_ContentProtectionXml_Element* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.ContentProtectionXml.Element)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml_Element::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        subelements_{visibility, arena},
        name_(arena) {}

inline void MediaInfo_ContentProtectionXml_Element::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MediaInfo_ContentProtectionXml_Element::~MediaInfo_ContentProtectionXml_Element() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.ContentProtectionXml.Element)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_ContentProtectionXml_Element::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_ContentProtectionXml_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.ContentProtectionXml.Element)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.subelements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_ContentProtectionXml_Element::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 57, 2> MediaInfo_ContentProtectionXml_Element::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_ContentProtectionXml_Element_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.name_)}},
    // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.attributes_)}},
    // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.subelements_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml_Element, _impl_.subelements_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair>()},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ContentProtectionXml_Element>()},
  }}, {{
    "\54\4\0\0\0\0\0\0"
    "shaka.MediaInfo.ContentProtectionXml.Element"
    "name"
  }},
};

::uint8_t* MediaInfo_ContentProtectionXml_Element::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.ContentProtectionXml.Element)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ContentProtectionXml.Element.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subelements_size()); i < n; i++) {
    const auto& repfield = this->_internal_subelements().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.ContentProtectionXml.Element)
  return target;
}

::size_t MediaInfo_ContentProtectionXml_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.ContentProtectionXml.Element)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_internal_attributes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 3;
  total_size += 1UL * this->_internal_subelements_size();
  for (const auto& msg : this->_internal_subelements()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_ContentProtectionXml_Element::_class_data_ = {
    MediaInfo_ContentProtectionXml_Element::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_ContentProtectionXml_Element::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_ContentProtectionXml_Element::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_ContentProtectionXml_Element*>(&to_msg);
  auto& from = static_cast<const MediaInfo_ContentProtectionXml_Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.ContentProtectionXml.Element)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  _this->_internal_mutable_subelements()->MergeFrom(
      from._internal_subelements());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_ContentProtectionXml_Element::CopyFrom(const MediaInfo_ContentProtectionXml_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.ContentProtectionXml.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_ContentProtectionXml_Element::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_ContentProtectionXml_Element::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_ContentProtectionXml_Element::InternalSwap(MediaInfo_ContentProtectionXml_Element* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.subelements_.InternalSwap(&other->_impl_.subelements_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata MediaInfo_ContentProtectionXml_Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[8]);
}
// ===================================================================

class MediaInfo_ContentProtectionXml::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo_ContentProtectionXml>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_._has_bits_);
  static void set_has_scheme_id_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MediaInfo_ContentProtectionXml::MediaInfo_ContentProtectionXml(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo.ContentProtectionXml)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        subelements_{visibility, arena, from.subelements_},
        scheme_id_uri_(arena, from.scheme_id_uri_),
        value_(arena, from.value_) {}

MediaInfo_ContentProtectionXml::MediaInfo_ContentProtectionXml(
    ::google::protobuf::Arena* arena,
    const MediaInfo_ContentProtectionXml& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo_ContentProtectionXml* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo.ContentProtectionXml)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo_ContentProtectionXml::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        subelements_{visibility, arena},
        scheme_id_uri_(arena),
        value_(arena) {}

inline void MediaInfo_ContentProtectionXml::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MediaInfo_ContentProtectionXml::~MediaInfo_ContentProtectionXml() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo.ContentProtectionXml)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo_ContentProtectionXml::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.scheme_id_uri_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo_ContentProtectionXml::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo.ContentProtectionXml)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.subelements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.scheme_id_uri_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo_ContentProtectionXml::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 63, 2> MediaInfo_ContentProtectionXml::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_ContentProtectionXml_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.subelements_)}},
    // optional string scheme_id_uri = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.scheme_id_uri_)}},
    // optional string value = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.value_)}},
    // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string scheme_id_uri = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.scheme_id_uri_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string value = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 4;
    {PROTOBUF_FIELD_OFFSET(MediaInfo_ContentProtectionXml, _impl_.subelements_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ContentProtectionXml_AttributeNameValuePair>()},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ContentProtectionXml_Element>()},
  }}, {{
    "\44\15\5\0\0\0\0\0"
    "shaka.MediaInfo.ContentProtectionXml"
    "scheme_id_uri"
    "value"
  }},
};

::uint8_t* MediaInfo_ContentProtectionXml::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo.ContentProtectionXml)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string scheme_id_uri = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_scheme_id_uri();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ContentProtectionXml.scheme_id_uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.ContentProtectionXml.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subelements_size()); i < n; i++) {
    const auto& repfield = this->_internal_subelements().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo.ContentProtectionXml)
  return target;
}

::size_t MediaInfo_ContentProtectionXml::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo.ContentProtectionXml)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shaka.MediaInfo.ContentProtectionXml.AttributeNameValuePair attributes = 3;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_internal_attributes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .shaka.MediaInfo.ContentProtectionXml.Element subelements = 4;
  total_size += 1UL * this->_internal_subelements_size();
  for (const auto& msg : this->_internal_subelements()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string scheme_id_uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_scheme_id_uri());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo_ContentProtectionXml::_class_data_ = {
    MediaInfo_ContentProtectionXml::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo_ContentProtectionXml::GetClassData() const {
  return &_class_data_;
}

void MediaInfo_ContentProtectionXml::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo_ContentProtectionXml*>(&to_msg);
  auto& from = static_cast<const MediaInfo_ContentProtectionXml&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo.ContentProtectionXml)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  _this->_internal_mutable_subelements()->MergeFrom(
      from._internal_subelements());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_scheme_id_uri(from._internal_scheme_id_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo_ContentProtectionXml::CopyFrom(const MediaInfo_ContentProtectionXml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo.ContentProtectionXml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo_ContentProtectionXml::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo_ContentProtectionXml::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo_ContentProtectionXml::InternalSwap(MediaInfo_ContentProtectionXml* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.subelements_.InternalSwap(&other->_impl_.subelements_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.scheme_id_uri_, &other->_impl_.scheme_id_uri_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata MediaInfo_ContentProtectionXml::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[9]);
}
// ===================================================================

class MediaInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_._has_bits_);
  static void set_has_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::shaka::MediaInfo_VideoInfo& video_info(const MediaInfo* msg);
  static void set_has_video_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::shaka::MediaInfo_AudioInfo& audio_info(const MediaInfo* msg);
  static void set_has_audio_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::shaka::MediaInfo_TextInfo& text_info(const MediaInfo* msg);
  static void set_has_text_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::shaka::MediaInfo_ProtectedContent& protected_content(const MediaInfo* msg);
  static void set_has_protected_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_reference_time_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_presentation_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_container_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::shaka::Range& init_range(const MediaInfo* msg);
  static void set_has_init_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::shaka::Range& index_range(const MediaInfo* msg);
  static void set_has_index_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_media_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_media_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_init_segment_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_segment_template(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_segment_duration_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_media_file_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_init_segment_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_segment_template_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_availability_time_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_segment_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_forced_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_dash_label(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::shaka::MediaInfo_VideoInfo& MediaInfo::_Internal::video_info(const MediaInfo* msg) {
  return *msg->_impl_.video_info_;
}
const ::shaka::MediaInfo_AudioInfo& MediaInfo::_Internal::audio_info(const MediaInfo* msg) {
  return *msg->_impl_.audio_info_;
}
const ::shaka::MediaInfo_TextInfo& MediaInfo::_Internal::text_info(const MediaInfo* msg) {
  return *msg->_impl_.text_info_;
}
const ::shaka::MediaInfo_ProtectedContent& MediaInfo::_Internal::protected_content(const MediaInfo* msg) {
  return *msg->_impl_.protected_content_;
}
const ::shaka::Range& MediaInfo::_Internal::init_range(const MediaInfo* msg) {
  return *msg->_impl_.init_range_;
}
const ::shaka::Range& MediaInfo::_Internal::index_range(const MediaInfo* msg) {
  return *msg->_impl_.index_range_;
}
MediaInfo::MediaInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:shaka.MediaInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_protections_{visibility, arena, from.content_protections_},
        hls_characteristics_{visibility, arena, from.hls_characteristics_},
        dash_accessibilities_{visibility, arena, from.dash_accessibilities_},
        dash_roles_{visibility, arena, from.dash_roles_},
        subsegment_ranges_{visibility, arena, from.subsegment_ranges_},
        media_file_name_(arena, from.media_file_name_),
        init_segment_name_(arena, from.init_segment_name_),
        segment_template_(arena, from.segment_template_),
        media_file_url_(arena, from.media_file_url_),
        init_segment_url_(arena, from.init_segment_url_),
        segment_template_url_(arena, from.segment_template_url_),
        dash_label_(arena, from.dash_label_) {}

MediaInfo::MediaInfo(
    ::google::protobuf::Arena* arena,
    const MediaInfo& from)
    : ::google::protobuf::Message(arena) {
  MediaInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.video_info_ = (cached_has_bits & 0x00000080u)
                ? CreateMaybeMessage<::shaka::MediaInfo_VideoInfo>(arena, *from._impl_.video_info_)
                : nullptr;
  _impl_.audio_info_ = (cached_has_bits & 0x00000100u)
                ? CreateMaybeMessage<::shaka::MediaInfo_AudioInfo>(arena, *from._impl_.audio_info_)
                : nullptr;
  _impl_.text_info_ = (cached_has_bits & 0x00000200u)
                ? CreateMaybeMessage<::shaka::MediaInfo_TextInfo>(arena, *from._impl_.text_info_)
                : nullptr;
  _impl_.init_range_ = (cached_has_bits & 0x00000400u)
                ? CreateMaybeMessage<::shaka::Range>(arena, *from._impl_.init_range_)
                : nullptr;
  _impl_.index_range_ = (cached_has_bits & 0x00000800u)
                ? CreateMaybeMessage<::shaka::Range>(arena, *from._impl_.index_range_)
                : nullptr;
  _impl_.protected_content_ = (cached_has_bits & 0x00001000u)
                ? CreateMaybeMessage<::shaka::MediaInfo_ProtectedContent>(arena, *from._impl_.protected_content_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bandwidth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, bandwidth_),
           offsetof(Impl_, index_) -
               offsetof(Impl_, bandwidth_) +
               sizeof(Impl_::index_));

  // @@protoc_insertion_point(copy_constructor:shaka.MediaInfo)
}
inline PROTOBUF_NDEBUG_INLINE MediaInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        content_protections_{visibility, arena},
        hls_characteristics_{visibility, arena},
        dash_accessibilities_{visibility, arena},
        dash_roles_{visibility, arena},
        subsegment_ranges_{visibility, arena},
        media_file_name_(arena),
        init_segment_name_(arena),
        segment_template_(arena),
        media_file_url_(arena),
        init_segment_url_(arena),
        segment_template_url_(arena),
        dash_label_(arena) {}

inline void MediaInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, video_info_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, video_info_) +
               sizeof(Impl_::index_));
}
MediaInfo::~MediaInfo() {
  // @@protoc_insertion_point(destructor:shaka.MediaInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MediaInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.media_file_name_.Destroy();
  _impl_.init_segment_name_.Destroy();
  _impl_.segment_template_.Destroy();
  _impl_.media_file_url_.Destroy();
  _impl_.init_segment_url_.Destroy();
  _impl_.segment_template_url_.Destroy();
  _impl_.dash_label_.Destroy();
  delete _impl_.video_info_;
  delete _impl_.audio_info_;
  delete _impl_.text_info_;
  delete _impl_.init_range_;
  delete _impl_.index_range_;
  delete _impl_.protected_content_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void MediaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:shaka.MediaInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_protections_.Clear();
  _impl_.hls_characteristics_.Clear();
  _impl_.dash_accessibilities_.Clear();
  _impl_.dash_roles_.Clear();
  _impl_.subsegment_ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.media_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.init_segment_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.segment_template_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.media_file_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.init_segment_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.segment_template_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.dash_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.video_info_ != nullptr);
      _impl_.video_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.audio_info_ != nullptr);
      _impl_.audio_info_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.text_info_ != nullptr);
      _impl_.text_info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.init_range_ != nullptr);
      _impl_.init_range_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.index_range_ != nullptr);
      _impl_.index_range_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.protected_content_ != nullptr);
      _impl_.protected_content_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.bandwidth_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.segment_duration_seconds_) -
        reinterpret_cast<char*>(&_impl_.bandwidth_)) + sizeof(_impl_.segment_duration_seconds_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.reference_time_scale_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.reference_time_scale_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MediaInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 28, 9, 205, 2> MediaInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_._has_bits_),
    0, // no _extensions_
    29, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3825205248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    28,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MediaInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 bandwidth = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo, _impl_.bandwidth_), 13>(),
     {8, 13, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.bandwidth_)}},
    // optional .shaka.MediaInfo.VideoInfo video_info = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 7, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.video_info_)}},
    // optional .shaka.MediaInfo.AudioInfo audio_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 8, 1, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.audio_info_)}},
    // optional .shaka.MediaInfo.TextInfo text_info = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 9, 2, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.text_info_)}},
    // repeated .shaka.MediaInfo.ContentProtectionXml content_protections = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.content_protections_)}},
    // optional .shaka.Range init_range = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 10, 4, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_range_)}},
    // optional .shaka.Range index_range = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 11, 5, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.index_range_)}},
    // optional string media_file_name = 8;
    {::_pbi::TcParser::FastSS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_file_name_)}},
    // optional float media_duration_seconds = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 14, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_duration_seconds_)}},
    // optional string init_segment_name = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 1, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_segment_name_)}},
    // optional string segment_template = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_template_)}},
    // optional float segment_duration_seconds = 12 [deprecated = true];
    {::_pbi::TcParser::FastF32S1,
     {101, 15, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_duration_seconds_)}},
    // optional uint32 reference_time_scale = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MediaInfo, _impl_.reference_time_scale_), 16>(),
     {104, 16, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.reference_time_scale_)}},
    // optional .shaka.MediaInfo.ContainerType container_type = 14 [default = CONTAINER_UNKNOWN];
    {::_pbi::TcParser::FastEr0S1,
     {112, 18, 5, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.container_type_)}},
    // optional .shaka.MediaInfo.ProtectedContent protected_content = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 12, 7, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.protected_content_)}},
    // optional uint64 presentation_time_offset = 16;
    {::_pbi::TcParser::FastV64S2,
     {384, 17, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.presentation_time_offset_)}},
    // optional string media_file_url = 17;
    {::_pbi::TcParser::FastSS2,
     {394, 3, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_file_url_)}},
    // optional string init_segment_url = 18;
    {::_pbi::TcParser::FastSS2,
     {402, 4, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_segment_url_)}},
    // optional string segment_template_url = 19;
    {::_pbi::TcParser::FastSS2,
     {410, 5, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_template_url_)}},
    // repeated string hls_characteristics = 20;
    {::_pbi::TcParser::FastSR2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.hls_characteristics_)}},
    // repeated string dash_accessibilities = 21;
    {::_pbi::TcParser::FastSR2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_accessibilities_)}},
    // repeated string dash_roles = 22;
    {::_pbi::TcParser::FastSR2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_roles_)}},
    // repeated .shaka.Range subsegment_ranges = 23;
    {::_pbi::TcParser::FastMtR2,
     {442, 63, 8, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.subsegment_ranges_)}},
    // optional double availability_time_offset = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 20, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.availability_time_offset_)}},
    // optional uint64 segment_duration = 25;
    {::_pbi::TcParser::FastV64S2,
     {456, 21, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_duration_)}},
    // optional bool forced_subtitle = 26 [default = false];
    {::_pbi::TcParser::FastV8S2,
     {464, 19, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.forced_subtitle_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 index = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 22, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.index_)}},
    // optional string dash_label = 29;
    {::_pbi::TcParser::FastSS2,
     {490, 6, 0, PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_label_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 bandwidth = 1;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.bandwidth_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .shaka.MediaInfo.VideoInfo video_info = 2;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.video_info_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .shaka.MediaInfo.AudioInfo audio_info = 3;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.audio_info_), _Internal::kHasBitsOffset + 8, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .shaka.MediaInfo.TextInfo text_info = 4;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.text_info_), _Internal::kHasBitsOffset + 9, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .shaka.MediaInfo.ContentProtectionXml content_protections = 5;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.content_protections_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .shaka.Range init_range = 6;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_range_), _Internal::kHasBitsOffset + 10, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .shaka.Range index_range = 7;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.index_range_), _Internal::kHasBitsOffset + 11, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string media_file_name = 8;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_file_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float media_duration_seconds = 9;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_duration_seconds_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional string init_segment_name = 10;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_segment_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string segment_template = 11;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_template_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float segment_duration_seconds = 12 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_duration_seconds_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 reference_time_scale = 13;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.reference_time_scale_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .shaka.MediaInfo.ContainerType container_type = 14 [default = CONTAINER_UNKNOWN];
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.container_type_), _Internal::kHasBitsOffset + 18, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .shaka.MediaInfo.ProtectedContent protected_content = 15;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.protected_content_), _Internal::kHasBitsOffset + 12, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 presentation_time_offset = 16;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.presentation_time_offset_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string media_file_url = 17;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.media_file_url_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string init_segment_url = 18;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.init_segment_url_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string segment_template_url = 19;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_template_url_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated string hls_characteristics = 20;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.hls_characteristics_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // repeated string dash_accessibilities = 21;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_accessibilities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // repeated string dash_roles = 22;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_roles_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // repeated .shaka.Range subsegment_ranges = 23;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.subsegment_ranges_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double availability_time_offset = 24;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.availability_time_offset_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional uint64 segment_duration = 25;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.segment_duration_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional bool forced_subtitle = 26 [default = false];
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.forced_subtitle_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 index = 28;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.index_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string dash_label = 29;
    {PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.dash_label_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_VideoInfo>()},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_AudioInfo>()},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_TextInfo>()},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ContentProtectionXml>()},
    {::_pbi::TcParser::GetTable<::shaka::Range>()},
    {::_pbi::TcParser::GetTable<::shaka::Range>()},
    {0, 6},
    {::_pbi::TcParser::GetTable<::shaka::MediaInfo_ProtectedContent>()},
    {::_pbi::TcParser::GetTable<::shaka::Range>()},
  }}, {{
    "\17\0\0\0\0\0\0\0\17\0\21\20\0\0\0\0\0\16\20\24\23\24\12\0\0\0\0\0\12\0\0\0"
    "shaka.MediaInfo"
    "media_file_name"
    "init_segment_name"
    "segment_template"
    "media_file_url"
    "init_segment_url"
    "segment_template_url"
    "hls_characteristics"
    "dash_accessibilities"
    "dash_roles"
    "dash_label"
  }},
};

::uint8_t* MediaInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shaka.MediaInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bandwidth = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_bandwidth(), target);
  }

  // optional .shaka.MediaInfo.VideoInfo video_info = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::video_info(this),
        _Internal::video_info(this).GetCachedSize(), target, stream);
  }

  // optional .shaka.MediaInfo.AudioInfo audio_info = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::audio_info(this),
        _Internal::audio_info(this).GetCachedSize(), target, stream);
  }

  // optional .shaka.MediaInfo.TextInfo text_info = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::text_info(this),
        _Internal::text_info(this).GetCachedSize(), target, stream);
  }

  // repeated .shaka.MediaInfo.ContentProtectionXml content_protections = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_content_protections_size()); i < n; i++) {
    const auto& repfield = this->_internal_content_protections().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .shaka.Range init_range = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::init_range(this),
        _Internal::init_range(this).GetCachedSize(), target, stream);
  }

  // optional .shaka.Range index_range = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::index_range(this),
        _Internal::index_range(this).GetCachedSize(), target, stream);
  }

  // optional string media_file_name = 8;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_media_file_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.media_file_name");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional float media_duration_seconds = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_media_duration_seconds(), target);
  }

  // optional string init_segment_name = 10;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_init_segment_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.init_segment_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string segment_template = 11;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_segment_template();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.segment_template");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional float segment_duration_seconds = 12 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_segment_duration_seconds(), target);
  }

  // optional uint32 reference_time_scale = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_reference_time_scale(), target);
  }

  // optional .shaka.MediaInfo.ContainerType container_type = 14 [default = CONTAINER_UNKNOWN];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_container_type(), target);
  }

  // optional .shaka.MediaInfo.ProtectedContent protected_content = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, _Internal::protected_content(this),
        _Internal::protected_content(this).GetCachedSize(), target, stream);
  }

  // optional uint64 presentation_time_offset = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        16, this->_internal_presentation_time_offset(), target);
  }

  // optional string media_file_url = 17;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_media_file_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.media_file_url");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // optional string init_segment_url = 18;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_init_segment_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.init_segment_url");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // optional string segment_template_url = 19;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_segment_template_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.segment_template_url");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // repeated string hls_characteristics = 20;
  for (int i = 0, n = this->_internal_hls_characteristics_size(); i < n; ++i) {
    const auto& s = this->_internal_hls_characteristics().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.hls_characteristics");
    target = stream->WriteString(20, s, target);
  }

  // repeated string dash_accessibilities = 21;
  for (int i = 0, n = this->_internal_dash_accessibilities_size(); i < n; ++i) {
    const auto& s = this->_internal_dash_accessibilities().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.dash_accessibilities");
    target = stream->WriteString(21, s, target);
  }

  // repeated string dash_roles = 22;
  for (int i = 0, n = this->_internal_dash_roles_size(); i < n; ++i) {
    const auto& s = this->_internal_dash_roles().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.dash_roles");
    target = stream->WriteString(22, s, target);
  }

  // repeated .shaka.Range subsegment_ranges = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subsegment_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_subsegment_ranges().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double availability_time_offset = 24;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        24, this->_internal_availability_time_offset(), target);
  }

  // optional uint64 segment_duration = 25;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        25, this->_internal_segment_duration(), target);
  }

  // optional bool forced_subtitle = 26 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_forced_subtitle(), target);
  }

  // optional uint32 index = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        28, this->_internal_index(), target);
  }

  // optional string dash_label = 29;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_dash_label();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "shaka.MediaInfo.dash_label");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shaka.MediaInfo)
  return target;
}

::size_t MediaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shaka.MediaInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .shaka.MediaInfo.ContentProtectionXml content_protections = 5;
  total_size += 1UL * this->_internal_content_protections_size();
  for (const auto& msg : this->_internal_content_protections()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string hls_characteristics = 20;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_hls_characteristics().size());
  for (int i = 0, n = _internal_hls_characteristics().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_hls_characteristics().Get(i));
  }
  // repeated string dash_accessibilities = 21;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_dash_accessibilities().size());
  for (int i = 0, n = _internal_dash_accessibilities().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_dash_accessibilities().Get(i));
  }
  // repeated string dash_roles = 22;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_dash_roles().size());
  for (int i = 0, n = _internal_dash_roles().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_dash_roles().Get(i));
  }
  // repeated .shaka.Range subsegment_ranges = 23;
  total_size += 2UL * this->_internal_subsegment_ranges_size();
  for (const auto& msg : this->_internal_subsegment_ranges()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string media_file_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_media_file_name());
    }

    // optional string init_segment_name = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_init_segment_name());
    }

    // optional string segment_template = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_segment_template());
    }

    // optional string media_file_url = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_media_file_url());
    }

    // optional string init_segment_url = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_init_segment_url());
    }

    // optional string segment_template_url = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_segment_template_url());
    }

    // optional string dash_label = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_dash_label());
    }

    // optional .shaka.MediaInfo.VideoInfo video_info = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.video_info_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .shaka.MediaInfo.AudioInfo audio_info = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.audio_info_);
    }

    // optional .shaka.MediaInfo.TextInfo text_info = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.text_info_);
    }

    // optional .shaka.Range init_range = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.init_range_);
    }

    // optional .shaka.Range index_range = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.index_range_);
    }

    // optional .shaka.MediaInfo.ProtectedContent protected_content = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.protected_content_);
    }

    // optional uint32 bandwidth = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_bandwidth());
    }

    // optional float media_duration_seconds = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 5;
    }

    // optional float segment_duration_seconds = 12 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 5;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 reference_time_scale = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_reference_time_scale());
    }

    // optional uint64 presentation_time_offset = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_presentation_time_offset());
    }

    // optional .shaka.MediaInfo.ContainerType container_type = 14 [default = CONTAINER_UNKNOWN];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_container_type());
    }

    // optional bool forced_subtitle = 26 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 3;
    }

    // optional double availability_time_offset = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 10;
    }

    // optional uint64 segment_duration = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_segment_duration());
    }

    // optional uint32 index = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MediaInfo::_class_data_ = {
    MediaInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* MediaInfo::GetClassData() const {
  return &_class_data_;
}

void MediaInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MediaInfo*>(&to_msg);
  auto& from = static_cast<const MediaInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:shaka.MediaInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_content_protections()->MergeFrom(
      from._internal_content_protections());
  _this->_internal_mutable_hls_characteristics()->MergeFrom(from._internal_hls_characteristics());
  _this->_internal_mutable_dash_accessibilities()->MergeFrom(from._internal_dash_accessibilities());
  _this->_internal_mutable_dash_roles()->MergeFrom(from._internal_dash_roles());
  _this->_internal_mutable_subsegment_ranges()->MergeFrom(
      from._internal_subsegment_ranges());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_media_file_name(from._internal_media_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_init_segment_name(from._internal_init_segment_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_segment_template(from._internal_segment_template());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_media_file_url(from._internal_media_file_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_init_segment_url(from._internal_init_segment_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_segment_template_url(from._internal_segment_template_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_dash_label(from._internal_dash_label());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_video_info()->::shaka::MediaInfo_VideoInfo::MergeFrom(
          from._internal_video_info());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_audio_info()->::shaka::MediaInfo_AudioInfo::MergeFrom(
          from._internal_audio_info());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_text_info()->::shaka::MediaInfo_TextInfo::MergeFrom(
          from._internal_text_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_init_range()->::shaka::Range::MergeFrom(
          from._internal_init_range());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_index_range()->::shaka::Range::MergeFrom(
          from._internal_index_range());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_protected_content()->::shaka::MediaInfo_ProtectedContent::MergeFrom(
          from._internal_protected_content());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bandwidth_ = from._impl_.bandwidth_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.media_duration_seconds_ = from._impl_.media_duration_seconds_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.segment_duration_seconds_ = from._impl_.segment_duration_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.reference_time_scale_ = from._impl_.reference_time_scale_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.presentation_time_offset_ = from._impl_.presentation_time_offset_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.container_type_ = from._impl_.container_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.forced_subtitle_ = from._impl_.forced_subtitle_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.availability_time_offset_ = from._impl_.availability_time_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.segment_duration_ = from._impl_.segment_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfo::CopyFrom(const MediaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shaka.MediaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MediaInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* MediaInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void MediaInfo::InternalSwap(MediaInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.content_protections_.InternalSwap(&other->_impl_.content_protections_);
  _impl_.hls_characteristics_.InternalSwap(&other->_impl_.hls_characteristics_);
  _impl_.dash_accessibilities_.InternalSwap(&other->_impl_.dash_accessibilities_);
  _impl_.dash_roles_.InternalSwap(&other->_impl_.dash_roles_);
  _impl_.subsegment_ranges_.InternalSwap(&other->_impl_.subsegment_ranges_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.media_file_name_, &other->_impl_.media_file_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.init_segment_name_, &other->_impl_.init_segment_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.segment_template_, &other->_impl_.segment_template_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.media_file_url_, &other->_impl_.media_file_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.init_segment_url_, &other->_impl_.init_segment_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.segment_template_url_, &other->_impl_.segment_template_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dash_label_, &other->_impl_.dash_label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.index_)
      + sizeof(MediaInfo::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(MediaInfo, _impl_.video_info_)>(
          reinterpret_cast<char*>(&_impl_.video_info_),
          reinterpret_cast<char*>(&other->_impl_.video_info_));
}

::google::protobuf::Metadata MediaInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_media_5finfo_2eproto_getter, &descriptor_table_media_5finfo_2eproto_once,
      file_level_metadata_media_5finfo_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace shaka
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
