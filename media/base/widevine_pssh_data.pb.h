// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: widevine_pssh_data.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_widevine_5fpssh_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_widevine_5fpssh_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_widevine_5fpssh_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_widevine_5fpssh_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_widevine_5fpssh_5fdata_2eproto;
namespace shaka {
namespace media {
class WidevineHeader;
struct WidevineHeaderDefaultTypeInternal;
extern WidevineHeaderDefaultTypeInternal _WidevineHeader_default_instance_;
class WidevinePsshData;
struct WidevinePsshDataDefaultTypeInternal;
extern WidevinePsshDataDefaultTypeInternal _WidevinePsshData_default_instance_;
}  // namespace media
}  // namespace shaka
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace shaka {
namespace media {
enum WidevinePsshData_Algorithm : int {
  WidevinePsshData_Algorithm_UNENCRYPTED = 0,
  WidevinePsshData_Algorithm_AESCTR = 1,
};

bool WidevinePsshData_Algorithm_IsValid(int value);
extern const uint32_t WidevinePsshData_Algorithm_internal_data_[];
constexpr WidevinePsshData_Algorithm WidevinePsshData_Algorithm_Algorithm_MIN = static_cast<WidevinePsshData_Algorithm>(0);
constexpr WidevinePsshData_Algorithm WidevinePsshData_Algorithm_Algorithm_MAX = static_cast<WidevinePsshData_Algorithm>(1);
constexpr int WidevinePsshData_Algorithm_Algorithm_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
WidevinePsshData_Algorithm_descriptor();
template <typename T>
const std::string& WidevinePsshData_Algorithm_Name(T value) {
  static_assert(std::is_same<T, WidevinePsshData_Algorithm>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Algorithm_Name().");
  return WidevinePsshData_Algorithm_Name(static_cast<WidevinePsshData_Algorithm>(value));
}
template <>
inline const std::string& WidevinePsshData_Algorithm_Name(WidevinePsshData_Algorithm value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WidevinePsshData_Algorithm_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool WidevinePsshData_Algorithm_Parse(absl::string_view name, WidevinePsshData_Algorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WidevinePsshData_Algorithm>(
      WidevinePsshData_Algorithm_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WidevinePsshData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shaka.media.WidevinePsshData) */ {
 public:
  inline WidevinePsshData() : WidevinePsshData(nullptr) {}
  ~WidevinePsshData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WidevinePsshData(::google::protobuf::internal::ConstantInitialized);

  inline WidevinePsshData(const WidevinePsshData& from)
      : WidevinePsshData(nullptr, from) {}
  WidevinePsshData(WidevinePsshData&& from) noexcept
    : WidevinePsshData() {
    *this = ::std::move(from);
  }

  inline WidevinePsshData& operator=(const WidevinePsshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidevinePsshData& operator=(WidevinePsshData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidevinePsshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidevinePsshData* internal_default_instance() {
    return reinterpret_cast<const WidevinePsshData*>(
               &_WidevinePsshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WidevinePsshData& a, WidevinePsshData& b) {
    a.Swap(&b);
  }
  inline void Swap(WidevinePsshData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidevinePsshData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WidevinePsshData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WidevinePsshData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WidevinePsshData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WidevinePsshData& from) {
    WidevinePsshData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WidevinePsshData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "shaka.media.WidevinePsshData";
  }
  protected:
  explicit WidevinePsshData(::google::protobuf::Arena* arena);
  WidevinePsshData(::google::protobuf::Arena* arena, const WidevinePsshData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Algorithm = WidevinePsshData_Algorithm;
  static constexpr Algorithm UNENCRYPTED = WidevinePsshData_Algorithm_UNENCRYPTED;
  static constexpr Algorithm AESCTR = WidevinePsshData_Algorithm_AESCTR;
  static inline bool Algorithm_IsValid(int value) {
    return WidevinePsshData_Algorithm_IsValid(value);
  }
  static constexpr Algorithm Algorithm_MIN = WidevinePsshData_Algorithm_Algorithm_MIN;
  static constexpr Algorithm Algorithm_MAX = WidevinePsshData_Algorithm_Algorithm_MAX;
  static constexpr int Algorithm_ARRAYSIZE = WidevinePsshData_Algorithm_Algorithm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Algorithm_descriptor() {
    return WidevinePsshData_Algorithm_descriptor();
  }
  template <typename T>
  static inline const std::string& Algorithm_Name(T value) {
    return WidevinePsshData_Algorithm_Name(value);
  }
  static inline bool Algorithm_Parse(absl::string_view name, Algorithm* value) {
    return WidevinePsshData_Algorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 2,
    kProviderFieldNumber = 3,
    kContentIdFieldNumber = 4,
    kPolicyFieldNumber = 6,
    kGroupedLicenseFieldNumber = 8,
    kAlgorithmFieldNumber = 1,
    kCryptoPeriodIndexFieldNumber = 7,
    kProtectionSchemeFieldNumber = 9,
  };
  // repeated bytes key_id = 2;
  int key_id_size() const;
  private:
  int _internal_key_id_size() const;

  public:
  void clear_key_id() ;
  const std::string& key_id(int index) const;
  std::string* mutable_key_id(int index);
  void set_key_id(int index, const std::string& value);
  void set_key_id(int index, std::string&& value);
  void set_key_id(int index, const char* value);
  void set_key_id(int index, const void* value, std::size_t size);
  void set_key_id(int index, absl::string_view value);
  std::string* add_key_id();
  void add_key_id(const std::string& value);
  void add_key_id(std::string&& value);
  void add_key_id(const char* value);
  void add_key_id(const void* value, std::size_t size);
  void add_key_id(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& key_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_key_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_key_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_key_id();

  public:
  // optional string provider = 3;
  bool has_provider() const;
  void clear_provider() ;
  const std::string& provider() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* value);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // optional bytes content_id = 4;
  bool has_content_id() const;
  void clear_content_id() ;
  const std::string& content_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_id(Arg_&& arg, Args_... args);
  std::string* mutable_content_id();
  PROTOBUF_NODISCARD std::string* release_content_id();
  void set_allocated_content_id(std::string* value);

  private:
  const std::string& _internal_content_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_id(
      const std::string& value);
  std::string* _internal_mutable_content_id();

  public:
  // optional string policy = 6;
  bool has_policy() const;
  void clear_policy() ;
  const std::string& policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_policy(Arg_&& arg, Args_... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* value);

  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(
      const std::string& value);
  std::string* _internal_mutable_policy();

  public:
  // optional bytes grouped_license = 8;
  bool has_grouped_license() const;
  void clear_grouped_license() ;
  const std::string& grouped_license() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grouped_license(Arg_&& arg, Args_... args);
  std::string* mutable_grouped_license();
  PROTOBUF_NODISCARD std::string* release_grouped_license();
  void set_allocated_grouped_license(std::string* value);

  private:
  const std::string& _internal_grouped_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grouped_license(
      const std::string& value);
  std::string* _internal_mutable_grouped_license();

  public:
  // optional .shaka.media.WidevinePsshData.Algorithm algorithm = 1;
  bool has_algorithm() const;
  void clear_algorithm() ;
  ::shaka::media::WidevinePsshData_Algorithm algorithm() const;
  void set_algorithm(::shaka::media::WidevinePsshData_Algorithm value);

  private:
  ::shaka::media::WidevinePsshData_Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::shaka::media::WidevinePsshData_Algorithm value);

  public:
  // optional uint32 crypto_period_index = 7;
  bool has_crypto_period_index() const;
  void clear_crypto_period_index() ;
  ::uint32_t crypto_period_index() const;
  void set_crypto_period_index(::uint32_t value);

  private:
  ::uint32_t _internal_crypto_period_index() const;
  void _internal_set_crypto_period_index(::uint32_t value);

  public:
  // optional uint32 protection_scheme = 9;
  bool has_protection_scheme() const;
  void clear_protection_scheme() ;
  ::uint32_t protection_scheme() const;
  void set_protection_scheme(::uint32_t value);

  private:
  ::uint32_t _internal_protection_scheme() const;
  void _internal_set_protection_scheme(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:shaka.media.WidevinePsshData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 1,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> key_id_;
    ::google::protobuf::internal::ArenaStringPtr provider_;
    ::google::protobuf::internal::ArenaStringPtr content_id_;
    ::google::protobuf::internal::ArenaStringPtr policy_;
    ::google::protobuf::internal::ArenaStringPtr grouped_license_;
    int algorithm_;
    ::uint32_t crypto_period_index_;
    ::uint32_t protection_scheme_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_widevine_5fpssh_5fdata_2eproto;
};// -------------------------------------------------------------------

class WidevineHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:shaka.media.WidevineHeader) */ {
 public:
  inline WidevineHeader() : WidevineHeader(nullptr) {}
  ~WidevineHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WidevineHeader(::google::protobuf::internal::ConstantInitialized);

  inline WidevineHeader(const WidevineHeader& from)
      : WidevineHeader(nullptr, from) {}
  WidevineHeader(WidevineHeader&& from) noexcept
    : WidevineHeader() {
    *this = ::std::move(from);
  }

  inline WidevineHeader& operator=(const WidevineHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline WidevineHeader& operator=(WidevineHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WidevineHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const WidevineHeader* internal_default_instance() {
    return reinterpret_cast<const WidevineHeader*>(
               &_WidevineHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WidevineHeader& a, WidevineHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(WidevineHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WidevineHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WidevineHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WidevineHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WidevineHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WidevineHeader& from) {
    WidevineHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WidevineHeader* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "shaka.media.WidevineHeader";
  }
  protected:
  explicit WidevineHeader(::google::protobuf::Arena* arena);
  WidevineHeader(::google::protobuf::Arena* arena, const WidevineHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdsFieldNumber = 2,
    kProviderFieldNumber = 3,
    kContentIdFieldNumber = 4,
  };
  // repeated string key_ids = 2;
  int key_ids_size() const;
  private:
  int _internal_key_ids_size() const;

  public:
  void clear_key_ids() ;
  const std::string& key_ids(int index) const;
  std::string* mutable_key_ids(int index);
  void set_key_ids(int index, const std::string& value);
  void set_key_ids(int index, std::string&& value);
  void set_key_ids(int index, const char* value);
  void set_key_ids(int index, const char* value, std::size_t size);
  void set_key_ids(int index, absl::string_view value);
  std::string* add_key_ids();
  void add_key_ids(const std::string& value);
  void add_key_ids(std::string&& value);
  void add_key_ids(const char* value);
  void add_key_ids(const char* value, std::size_t size);
  void add_key_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& key_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_key_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_key_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_key_ids();

  public:
  // optional string provider = 3;
  bool has_provider() const;
  void clear_provider() ;
  const std::string& provider() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* value);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // optional bytes content_id = 4;
  bool has_content_id() const;
  void clear_content_id() ;
  const std::string& content_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content_id(Arg_&& arg, Args_... args);
  std::string* mutable_content_id();
  PROTOBUF_NODISCARD std::string* release_content_id();
  void set_allocated_content_id(std::string* value);

  private:
  const std::string& _internal_content_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_id(
      const std::string& value);
  std::string* _internal_mutable_content_id();

  public:
  // @@protoc_insertion_point(class_scope:shaka.media.WidevineHeader)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> key_ids_;
    ::google::protobuf::internal::ArenaStringPtr provider_;
    ::google::protobuf::internal::ArenaStringPtr content_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_widevine_5fpssh_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WidevinePsshData

// optional .shaka.media.WidevinePsshData.Algorithm algorithm = 1;
inline bool WidevinePsshData::has_algorithm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void WidevinePsshData::clear_algorithm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.algorithm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::shaka::media::WidevinePsshData_Algorithm WidevinePsshData::algorithm() const {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.algorithm)
  return _internal_algorithm();
}
inline void WidevinePsshData::set_algorithm(::shaka::media::WidevinePsshData_Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.algorithm)
}
inline ::shaka::media::WidevinePsshData_Algorithm WidevinePsshData::_internal_algorithm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::shaka::media::WidevinePsshData_Algorithm>(_impl_.algorithm_);
}
inline void WidevinePsshData::_internal_set_algorithm(::shaka::media::WidevinePsshData_Algorithm value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::shaka::media::WidevinePsshData_Algorithm_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.algorithm_ = value;
}

// repeated bytes key_id = 2;
inline int WidevinePsshData::_internal_key_id_size() const {
  return _internal_key_id().size();
}
inline int WidevinePsshData::key_id_size() const {
  return _internal_key_id_size();
}
inline void WidevinePsshData::clear_key_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_id_.Clear();
}
inline std::string* WidevinePsshData::add_key_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_key_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:shaka.media.WidevinePsshData.key_id)
  return _s;
}
inline const std::string& WidevinePsshData::key_id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.key_id)
  return _internal_key_id().Get(index);
}
inline std::string* WidevinePsshData::mutable_key_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevinePsshData.key_id)
  return _internal_mutable_key_id()->Mutable(index);
}
inline void WidevinePsshData::set_key_id(int index, const std::string& value) {
  _internal_mutable_key_id()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::set_key_id(int index, std::string&& value) {
  _internal_mutable_key_id()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::set_key_id(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_key_id()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::set_key_id(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_key_id()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::set_key_id(int index, absl::string_view value) {
  _internal_mutable_key_id()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::add_key_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_id()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::add_key_id(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_id()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::add_key_id(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_id()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::add_key_id(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_id()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shaka.media.WidevinePsshData.key_id)
}
inline void WidevinePsshData::add_key_id(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_id()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:shaka.media.WidevinePsshData.key_id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WidevinePsshData::key_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:shaka.media.WidevinePsshData.key_id)
  return _internal_key_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WidevinePsshData::mutable_key_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:shaka.media.WidevinePsshData.key_id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_key_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WidevinePsshData::_internal_key_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WidevinePsshData::_internal_mutable_key_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.key_id_;
}

// optional string provider = 3;
inline bool WidevinePsshData::has_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WidevinePsshData::clear_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.provider_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WidevinePsshData::provider() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevinePsshData::set_provider(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.provider)
}
inline std::string* WidevinePsshData::mutable_provider() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevinePsshData.provider)
  return _s;
}
inline const std::string& WidevinePsshData::_internal_provider() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.provider_.Get();
}
inline void WidevinePsshData::_internal_set_provider(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_.Set(value, GetArena());
}
inline std::string* WidevinePsshData::_internal_mutable_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.provider_.Mutable( GetArena());
}
inline std::string* WidevinePsshData::release_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevinePsshData.provider)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.provider_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevinePsshData::set_allocated_provider(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.provider_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevinePsshData.provider)
}

// optional bytes content_id = 4;
inline bool WidevinePsshData::has_content_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WidevinePsshData::clear_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WidevinePsshData::content_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.content_id)
  return _internal_content_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevinePsshData::set_content_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.content_id)
}
inline std::string* WidevinePsshData::mutable_content_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_id();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevinePsshData.content_id)
  return _s;
}
inline const std::string& WidevinePsshData::_internal_content_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_id_.Get();
}
inline void WidevinePsshData::_internal_set_content_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_id_.Set(value, GetArena());
}
inline std::string* WidevinePsshData::_internal_mutable_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_id_.Mutable( GetArena());
}
inline std::string* WidevinePsshData::release_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevinePsshData.content_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.content_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevinePsshData::set_allocated_content_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_id_.IsDefault()) {
          _impl_.content_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevinePsshData.content_id)
}

// optional string policy = 6;
inline bool WidevinePsshData::has_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WidevinePsshData::clear_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WidevinePsshData::policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.policy)
  return _internal_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevinePsshData::set_policy(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.policy)
}
inline std::string* WidevinePsshData::mutable_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevinePsshData.policy)
  return _s;
}
inline const std::string& WidevinePsshData::_internal_policy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.policy_.Get();
}
inline void WidevinePsshData::_internal_set_policy(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.policy_.Set(value, GetArena());
}
inline std::string* WidevinePsshData::_internal_mutable_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.policy_.Mutable( GetArena());
}
inline std::string* WidevinePsshData::release_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevinePsshData.policy)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.policy_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.policy_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevinePsshData::set_allocated_policy(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.policy_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.policy_.IsDefault()) {
          _impl_.policy_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevinePsshData.policy)
}

// optional uint32 crypto_period_index = 7;
inline bool WidevinePsshData::has_crypto_period_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void WidevinePsshData::clear_crypto_period_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crypto_period_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t WidevinePsshData::crypto_period_index() const {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.crypto_period_index)
  return _internal_crypto_period_index();
}
inline void WidevinePsshData::set_crypto_period_index(::uint32_t value) {
  _internal_set_crypto_period_index(value);
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.crypto_period_index)
}
inline ::uint32_t WidevinePsshData::_internal_crypto_period_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crypto_period_index_;
}
inline void WidevinePsshData::_internal_set_crypto_period_index(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.crypto_period_index_ = value;
}

// optional bytes grouped_license = 8;
inline bool WidevinePsshData::has_grouped_license() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void WidevinePsshData::clear_grouped_license() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.grouped_license_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WidevinePsshData::grouped_license() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.grouped_license)
  return _internal_grouped_license();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevinePsshData::set_grouped_license(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.grouped_license_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.grouped_license)
}
inline std::string* WidevinePsshData::mutable_grouped_license() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_grouped_license();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevinePsshData.grouped_license)
  return _s;
}
inline const std::string& WidevinePsshData::_internal_grouped_license() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.grouped_license_.Get();
}
inline void WidevinePsshData::_internal_set_grouped_license(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.grouped_license_.Set(value, GetArena());
}
inline std::string* WidevinePsshData::_internal_mutable_grouped_license() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.grouped_license_.Mutable( GetArena());
}
inline std::string* WidevinePsshData::release_grouped_license() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevinePsshData.grouped_license)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.grouped_license_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grouped_license_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevinePsshData::set_allocated_grouped_license(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.grouped_license_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.grouped_license_.IsDefault()) {
          _impl_.grouped_license_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevinePsshData.grouped_license)
}

// optional uint32 protection_scheme = 9;
inline bool WidevinePsshData::has_protection_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void WidevinePsshData::clear_protection_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protection_scheme_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t WidevinePsshData::protection_scheme() const {
  // @@protoc_insertion_point(field_get:shaka.media.WidevinePsshData.protection_scheme)
  return _internal_protection_scheme();
}
inline void WidevinePsshData::set_protection_scheme(::uint32_t value) {
  _internal_set_protection_scheme(value);
  // @@protoc_insertion_point(field_set:shaka.media.WidevinePsshData.protection_scheme)
}
inline ::uint32_t WidevinePsshData::_internal_protection_scheme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.protection_scheme_;
}
inline void WidevinePsshData::_internal_set_protection_scheme(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.protection_scheme_ = value;
}

// -------------------------------------------------------------------

// WidevineHeader

// repeated string key_ids = 2;
inline int WidevineHeader::_internal_key_ids_size() const {
  return _internal_key_ids().size();
}
inline int WidevineHeader::key_ids_size() const {
  return _internal_key_ids_size();
}
inline void WidevineHeader::clear_key_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_ids_.Clear();
}
inline std::string* WidevineHeader::add_key_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_key_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:shaka.media.WidevineHeader.key_ids)
  return _s;
}
inline const std::string& WidevineHeader::key_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevineHeader.key_ids)
  return _internal_key_ids().Get(index);
}
inline std::string* WidevineHeader::mutable_key_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevineHeader.key_ids)
  return _internal_mutable_key_ids()->Mutable(index);
}
inline void WidevineHeader::set_key_ids(int index, const std::string& value) {
  _internal_mutable_key_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::set_key_ids(int index, std::string&& value) {
  _internal_mutable_key_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::set_key_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_key_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::set_key_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_key_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::set_key_ids(int index, absl::string_view value) {
  _internal_mutable_key_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::add_key_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::add_key_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::add_key_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::add_key_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:shaka.media.WidevineHeader.key_ids)
}
inline void WidevineHeader::add_key_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_key_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:shaka.media.WidevineHeader.key_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WidevineHeader::key_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:shaka.media.WidevineHeader.key_ids)
  return _internal_key_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WidevineHeader::mutable_key_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:shaka.media.WidevineHeader.key_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_key_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WidevineHeader::_internal_key_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WidevineHeader::_internal_mutable_key_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.key_ids_;
}

// optional string provider = 3;
inline bool WidevineHeader::has_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WidevineHeader::clear_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.provider_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WidevineHeader::provider() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevineHeader.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevineHeader::set_provider(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevineHeader.provider)
}
inline std::string* WidevineHeader::mutable_provider() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevineHeader.provider)
  return _s;
}
inline const std::string& WidevineHeader::_internal_provider() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.provider_.Get();
}
inline void WidevineHeader::_internal_set_provider(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.provider_.Set(value, GetArena());
}
inline std::string* WidevineHeader::_internal_mutable_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.provider_.Mutable( GetArena());
}
inline std::string* WidevineHeader::release_provider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevineHeader.provider)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.provider_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevineHeader::set_allocated_provider(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.provider_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevineHeader.provider)
}

// optional bytes content_id = 4;
inline bool WidevineHeader::has_content_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WidevineHeader::clear_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WidevineHeader::content_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shaka.media.WidevineHeader.content_id)
  return _internal_content_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WidevineHeader::set_content_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shaka.media.WidevineHeader.content_id)
}
inline std::string* WidevineHeader::mutable_content_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content_id();
  // @@protoc_insertion_point(field_mutable:shaka.media.WidevineHeader.content_id)
  return _s;
}
inline const std::string& WidevineHeader::_internal_content_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_id_.Get();
}
inline void WidevineHeader::_internal_set_content_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_id_.Set(value, GetArena());
}
inline std::string* WidevineHeader::_internal_mutable_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_id_.Mutable( GetArena());
}
inline std::string* WidevineHeader::release_content_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:shaka.media.WidevineHeader.content_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.content_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WidevineHeader::set_allocated_content_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_id_.IsDefault()) {
          _impl_.content_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:shaka.media.WidevineHeader.content_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace media
}  // namespace shaka


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::shaka::media::WidevinePsshData_Algorithm> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::shaka::media::WidevinePsshData_Algorithm>() {
  return ::shaka::media::WidevinePsshData_Algorithm_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_widevine_5fpssh_5fdata_2eproto_2epb_2eh
